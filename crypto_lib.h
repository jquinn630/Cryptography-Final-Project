#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>

//OpenSSL for Encryption
#include <openssl/aes.h>
#include <openssl/rand.h>
#include <openssl/hmac.h>
#include <openssl/evp.h>
#include <openssl/rsa.h>
#include <openssl/dh.h>
#include <openssl/bn.h>
#include <openssl/rsa.h>
#include <openssl/pem.h>

void gen_secret_key(unsigned char * key)
{
	// get a 256 bit key
	RAND_bytes(key, 32);
}

void gen_iv(unsigned char * iv)
{
	// get a 256 bit iv - needs to be same length as key
	// generated by sender
	RAND_bytes(iv, 32);
}

void aes_cbc_sec_enc(unsigned char * input, unsigned char * output, int length, unsigned char * key, unsigned char * iv)
{
	// CBC encryption
	AES_KEY theKey;
	AES_set_encrypt_key(key, 256, &theKey);
	AES_cbc_encrypt(input, output, length, &theKey, iv, AES_ENCRYPT);
}

void aes_cbc_sec_dec(unsigned char * input, unsigned char * output, int length, unsigned char * key, unsigned char * iv)
{
	// CBC decryption
	AES_KEY theKey;
	AES_set_decrypt_key(key, 256, &theKey);
	AES_cbc_encrypt(input, output, length, &theKey, iv, AES_DECRYPT);
}

void compute_hash(unsigned char * input, int input_len, unsigned char * output, unsigned char * userKey)
{
	unsigned int out_len;
	HMAC(EVP_sha256(), userKey, 32, input, input_len, output, &out_len);   
}

int verify_hash(unsigned char * data, int data_len, unsigned char * hash, unsigned char *userKey)
{
	unsigned char output[32];
	unsigned int out_len;
	HMAC(EVP_sha256(), userKey, 32, data, data_len, output, &out_len);

	if (memcmp(hash, output, 32)==0)
	{
		printf("HMAC verified.\n");
		return 1;
	}   

	return 0;
}